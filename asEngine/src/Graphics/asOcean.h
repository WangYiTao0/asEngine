#pragma once
#include "CommonInclude.h"
#include "Graphics/API/asGraphicsDevice.h"
#include "Graphics\asFFTGenerator.h"
#include "System\asScene.h"

#include <vector>

class asOcean
{
public:
	asOcean(const asScene::WeatherComponent& weather);

	void UpdateDisplacementMap(const asScene::WeatherComponent& weather, float time, asGraphics::CommandList cmd) const;
	void Render(const asScene::CameraComponent& camera, const asScene::WeatherComponent& weather, float time, asGraphics::CommandList cmd) const;

	const asGraphics::Texture* getDisplacementMap() const;
	const asGraphics::Texture* getGradientMap() const;

	static void Initialize();
	static void LoadShaders();

protected:
	asGraphics::Texture displacementMap;		// (RGBA32F)
	asGraphics::Texture gradientMap;			// (RGBA16F)


	void initHeightMap(const asScene::WeatherComponent& weather, XMFLOAT2* out_h0, float* out_omega);


	// Initial height field H(0) generated by Phillips spectrum & Gauss distribution.
	asGraphics::GPUBuffer buffer_Float2_H0;

	// Angular frequency
	asGraphics::GPUBuffer buffer_Float_Omega;

	// Height field H(t), choppy field Dx(t) and Dy(t) in frequency domain, updated each frame.
	asGraphics::GPUBuffer buffer_Float2_Ht;

	// Height & choppy buffer in the space domain, corresponding to H(t), Dx(t) and Dy(t)
	asGraphics::GPUBuffer buffer_Float_Dxyz;

	asGraphics::GPUBuffer immutableCB;
	asGraphics::GPUBuffer perFrameCB;
};